using UnityEngine;

namespace Core.Entities
{
    public class Invulnerability : MonoBehaviour
    {
        [SerializeField] private Health _health;
        [SerializeField] private SpriteRenderer _renderer;
        [SerializeField] private Color _color;
        [SerializeField] private float _duration;
        public bool invulnerable = false;
        private Color _defaultColor;

        private void OnEnable()
        {
            _health.OnHit += Activate;
            _health.OnConditionCheck += CheckInvulnerability;
        }

        private void OnDisable()
        {
            _health.OnHit -= Activate;
            _health.OnConditionCheck -= CheckInvulnerability;
        }

        private void Awake() => _defaultColor = _renderer.color;

        private void Activate()
        {
            invulnerable = true;
            _renderer.color = _color;
            StartCoroutine(Timer.Start(_duration, Reset));
        }

        private void Reset()
        {
            invulnerable = false;
            _renderer.color = _defaultColor;
        }

        private bool CheckInvulnerability()
        {
            return invulnerable;
        }
    }
}